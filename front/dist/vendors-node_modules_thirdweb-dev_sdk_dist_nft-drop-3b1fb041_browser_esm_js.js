"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkfront"] = self["webpackChunkfront"] || []).push([["vendors-node_modules_thirdweb-dev_sdk_dist_nft-drop-3b1fb041_browser_esm_js"],{

/***/ "./node_modules/@thirdweb-dev/sdk/dist/nft-drop-3b1fb041.browser.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@thirdweb-dev/sdk/dist/nft-drop-3b1fb041.browser.esm.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NFTDrop: function() { return /* binding */ NFTDrop; }\n/* harmony export */ });\n/* harmony import */ var _QueryParams_39bcad7a_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./QueryParams-39bcad7a.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/QueryParams-39bcad7a.browser.esm.js\");\n/* harmony import */ var _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./contract-publisher-d9ce6b4c.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/contract-publisher-d9ce6b4c.browser.esm.js\");\n/* harmony import */ var _erc_721_standard_a58c17b8_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./erc-721-standard-a58c17b8.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/erc-721-standard-a58c17b8.browser.esm.js\");\n/* harmony import */ var _thirdweb_checkout_911bc495_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./thirdweb-checkout-911bc495.browser.esm.js */ \"./node_modules/@thirdweb-dev/sdk/dist/thirdweb-checkout-911bc495.browser.esm.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/bignumber/lib.esm/bignumber.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ethers */ \"./node_modules/@ethersproject/constants/lib.esm/addresses.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bn.js */ \"./node_modules/bn.js/lib/bn.js\");\n/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tiny-invariant */ \"./node_modules/tiny-invariant/dist/esm/tiny-invariant.js\");\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! merkletreejs */ \"./node_modules/merkletreejs/dist/index.js\");\n/* harmony import */ var merkletreejs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(merkletreejs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fast-deep-equal */ \"./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bs58 */ \"./node_modules/bs58/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! eventemitter3 */ \"./node_modules/@thirdweb-dev/sdk/node_modules/eventemitter3/index.mjs\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cross-fetch */ \"./node_modules/cross-fetch/dist/browser-ponyfill.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(cross_fetch__WEBPACK_IMPORTED_MODULE_6__);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Setup a collection of one-of-one NFTs that are minted as users claim them.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"nft-drop\");\n * ```\n *\n * @public\n */\nclass NFTDrop extends _erc_721_standard_a58c17b8_browser_esm_js__WEBPACK_IMPORTED_MODULE_7__.S {\n  static contractRoles = _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dq;\n\n  /**\n   * @internal\n   */\n\n  /**\n   * Configure royalties\n   * @remarks Set your own royalties for the entire contract or per token\n   * @example\n   * ```javascript\n   * // royalties on the whole contract\n   * contract.royalties.setDefaultRoyaltyInfo({\n   *   seller_fee_basis_points: 100, // 1%\n   *   fee_recipient: \"0x...\"\n   * });\n   * // override royalty for a particular token\n   * contract.royalties.setTokenRoyaltyInfo(tokenId, {\n   *   seller_fee_basis_points: 500, // 5%\n   *   fee_recipient: \"0x...\"\n   * });\n   * ```\n   */\n\n  /**\n   * Configure claim conditions\n   * @remarks Define who can claim NFTs in the collection, when and how many.\n   * @example\n   * ```javascript\n   * const presaleStartTime = new Date();\n   * const publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\n   * const claimConditions = [\n   *   {\n   *     startTime: presaleStartTime, // start the presale now\n   *     maxClaimableSupply: 2, // limit how many mints for this presale\n   *     price: 0.01, // presale price\n   *     snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n   *   },\n   *   {\n   *     startTime: publicSaleStartTime, // 24h after presale, start public sale\n   *     price: 0.08, // public sale price\n   *   }\n   * ]);\n   * await contract.claimConditions.set(claimConditions);\n   * ```\n   */\n\n  /**\n   * Delayed reveal\n   * @remarks Create a batch of encrypted NFTs that can be revealed at a later time.\n   * @example\n   * ```javascript\n   * // the real NFTs, these will be encrypted until you reveal them\n   * const realNFTs = [{\n   *   name: \"Common NFT #1\",\n   *   description: \"Common NFT, one of many.\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }, {\n   *   name: \"Super Rare NFT #2\",\n   *   description: \"You got a Super Rare NFT!\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   * // A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\n   * const placeholderNFT = {\n   *   name: \"Hidden NFT\",\n   *   description: \"Will be revealed next week!\"\n   * };\n   * // Create and encrypt the NFTs\n   * await contract.revealer.createDelayedRevealBatch(\n   *   placeholderNFT,\n   *   realNFTs,\n   *   \"my secret password\",\n   * );\n   * // Whenever you're ready, reveal your NFTs at any time\n   * const batchId = 0; // the batch to reveal\n   * await contract.revealer.reveal(batchId, \"my secret password\");\n   * ```\n   */\n\n  /**\n   * Checkout\n   * @remarks Create a FIAT currency checkout for your NFT drop.\n   */\n\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.d4(network, address, abi, options, storage);\n    super(contractWrapper, storage, chainId);\n    this.abi = _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.e.parse(abi || []);\n    this.metadata = new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ag(this.contractWrapper, _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.di, this.storage);\n    this.app = new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.a$(this.contractWrapper, this.metadata, this.storage);\n    this.roles = new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ah(this.contractWrapper, NFTDrop.contractRoles);\n    this.royalties = new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ai(this.contractWrapper, this.metadata);\n    this.sales = new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aj(this.contractWrapper);\n    this.claimConditions = new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.al(this.contractWrapper, this.metadata, this.storage);\n    this.encoder = new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.af(this.contractWrapper);\n    this.estimator = new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aP(this.contractWrapper);\n    this.events = new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aQ(this.contractWrapper);\n    this.platformFees = new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aS(this.contractWrapper);\n    this.revealer = new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.ak(this.contractWrapper, this.storage, _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dC.name, () => this.erc721.nextTokenIdToMint());\n    this.interceptor = new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aR(this.contractWrapper);\n    this.owner = new _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aU(this.contractWrapper);\n    this.checkout = new _thirdweb_checkout_911bc495_browser_esm_js__WEBPACK_IMPORTED_MODULE_9__.a(this.contractWrapper);\n  }\n\n  /**\n   * @internal\n   */\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get the total count NFTs in this drop contract, both claimed and unclaimed\n   */\n  async totalSupply() {\n    const claimed = await this.totalClaimedSupply();\n    const unclaimed = await this.totalUnclaimedSupply();\n    return claimed.add(unclaimed);\n  }\n\n  /**\n   * Get All Claimed NFTs\n   *\n   * @remarks Fetch all the NFTs (and their owners) that have been claimed in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTs = await contract.getAllClaimed();\n   * const firstOwner = claimedNFTs[0].owner;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata and their ownersfor all NFTs queried.\n   */\n  async getAllClaimed(queryParams) {\n    const start = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(queryParams?.count || _QueryParams_39bcad7a_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.D).toNumber();\n    const maxId = Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(), start + count);\n    return await Promise.all(Array.from(Array(maxId).keys()).map(i => this.get(i.toString())));\n  }\n\n  /**\n   * Get All Unclaimed NFTs\n   *\n   * @remarks Fetch all the NFTs that have been not been claimed yet in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTs = await contract.getAllUnclaimed();\n   * const firstUnclaimedNFT = unclaimedNFTs[0].name;\n   * ```\n   *\n   * @param queryParams - optional filtering to only fetch a subset of results.\n   * @returns The NFT metadata for all NFTs queried.\n   */\n  async getAllUnclaimed(queryParams) {\n    const start = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(queryParams?.start || 0).toNumber();\n    const count = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(queryParams?.count || _QueryParams_39bcad7a_browser_esm_js__WEBPACK_IMPORTED_MODULE_11__.D).toNumber();\n    const firstTokenId = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(Math.max((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(), start));\n    const maxId = ethers__WEBPACK_IMPORTED_MODULE_10__.BigNumber.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(), firstTokenId.toNumber() + count));\n    return await Promise.all(Array.from(Array(maxId.sub(firstTokenId).toNumber()).keys()).map(i => this.erc721.getTokenMetadata(firstTokenId.add(i).toString())));\n  }\n\n  /**\n   * Get the claimed supply\n   *\n   * @remarks Get the number of claimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const claimedNFTCount = await contract.totalClaimedSupply();\n   * console.log(`NFTs claimed so far: ${claimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalClaimedSupply() {\n    return this.erc721.totalClaimedSupply();\n  }\n\n  /**\n   * Get the unclaimed supply\n   *\n   * @remarks Get the number of unclaimed NFTs in this Drop.\n   *\n   * * @example\n   * ```javascript\n   * const unclaimedNFTCount = await contract.totalUnclaimedSupply();\n   * console.log(`NFTs left to claim: ${unclaimedNFTCount}`);\n   * ```\n   * @returns the unclaimed supply\n   */\n  async totalUnclaimedSupply() {\n    return this.erc721.totalUnclaimedSupply();\n  }\n\n  /**\n   * Get whether users can transfer NFTs from this contract\n   */\n  async isTransferRestricted() {\n    const anyoneCanTransfer = await this.contractWrapper.readContract.hasRole((0,_contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.bH)(\"transfer\"), ethers__WEBPACK_IMPORTED_MODULE_12__.AddressZero);\n    return !anyoneCanTransfer;\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create a batch of unique NFTs to be claimed in the future\n   *\n   * @remarks Create batch allows you to create a batch of many unique NFTs in one transaction.\n   *\n   * @example\n   * ```javascript\n   * // Custom metadata of the NFTs to create\n   * const metadatas = [{\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n   * }, {\n   *   name: \"Cool NFT\",\n   *   description: \"This is a cool NFT\",\n   *   image: fs.readFileSync(\"path/to/image.png\"),\n   * }];\n   *\n   * const results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\n   * const firstTokenId = results[0].id; // token id of the first created NFT\n   * const firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT\n   * ```\n   *\n   * @param metadatas - The metadata to include in the batch.\n   * @param options - optional upload progress callback\n   */\n  createBatch = /* @__PURE__ */(0,_contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dc)(async (metadatas, options) => {\n    return this.erc721.lazyMint.prepare(metadatas, options);\n  });\n\n  /**\n   * Construct a claim transaction without executing it.\n   * This is useful for estimating the gas cost of a claim transaction, overriding transaction options and having fine grained control over the transaction execution.\n   * @param destinationAddress\n   * @param quantity\n   * @param checkERC20Allowance\n   *\n   * @deprecated Use `contract.erc721.claim.prepare(...args)` instead\n   */\n  async getClaimTransaction(destinationAddress, quantity) {\n    let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return this.erc721.getClaimTransaction(destinationAddress, quantity, {\n      checkERC20Allowance\n    });\n  }\n\n  /**\n   * Claim unique NFTs to a specific Wallet\n   *\n   * @remarks Let the specified wallet claim NFTs.\n   *\n   * @example\n   * ```javascript\n   * const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\n   * const quantity = 1; // how many unique NFTs you want to claim\n   *\n   * const tx = await contract.claimTo(address, quantity);\n   * const receipt = tx[0].receipt; // the transaction receipt\n   * const claimedTokenId = tx[0].id; // the id of the NFT claimed\n   * const claimedNFT = await tx[0].data(); // (optional) get the claimed NFT metadata\n   * ```\n   *\n   * @param destinationAddress - Address you want to send the token to\n   * @param quantity - Quantity of the tokens you want to claim\n   * @param checkERC20Allowance - Optional, check if the wallet has enough ERC20 allowance to claim the tokens, and if not, approve the transfer\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claimTo = /* @__PURE__ */(0,_contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dc)((() => {\n    var _this = this;\n    return async function (destinationAddress, quantity) {\n      let checkERC20Allowance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return _this.erc721.claimTo.prepare(destinationAddress, quantity, {\n        checkERC20Allowance\n      });\n    };\n  })());\n\n  /**\n   * Claim NFTs to the connected wallet.\n   *\n   * @remarks See {@link NFTDrop.claimTo}\n   *\n   * @returns - an array of results containing the id of the token claimed, the transaction receipt and a promise to optionally fetch the nft metadata\n   */\n  claim = /* @__PURE__ */(0,_contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dc)((() => {\n    var _this2 = this;\n    return async function (quantity) {\n      let checkERC20Allowance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return _this2.claimTo.prepare(await _this2.contractWrapper.getSignerAddress(), quantity, checkERC20Allowance);\n    };\n  })());\n\n  /**\n   * Burn a single NFT\n   *\n   * @param tokenId - the token Id to burn\n   *\n   * @example\n   * ```javascript\n   * const result = await contract.burnToken(tokenId);\n   * ```\n   *\n   */\n  burn = /* @__PURE__ */(0,_contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dc)(async tokenId => {\n    return this.erc721.burn.prepare(tokenId);\n  });\n\n  /******************************\n   * STANDARD ERC721 FUNCTIONS\n   ******************************/\n\n  /**\n   * Get a single NFT\n   *\n   * @example\n   * ```javascript\n   * const tokenId = 0;\n   * const nft = await contract.get(tokenId);\n   * ```\n   * @param tokenId - the tokenId of the NFT to retrieve\n   * @returns The NFT metadata\n   */\n  async get(tokenId) {\n    return this.erc721.get(tokenId);\n  }\n\n  /**\n   * Get the current owner of a given NFT within this Contract\n   *\n   * @param tokenId - the tokenId of the NFT\n   * @returns the address of the owner\n   */\n  async ownerOf(tokenId) {\n    return this.erc721.ownerOf(tokenId);\n  }\n\n  /**\n   * Get NFT Balance\n   *\n   * @remarks Get a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const balance = await contract.balanceOf(walletAddress);\n   * console.log(balance);\n   * ```\n   */\n  async balanceOf(address) {\n    return this.erc721.balanceOf(address);\n  }\n\n  /**\n   * Get NFT Balance for the currently connected wallet\n   */\n  async balance() {\n    return this.erc721.balance();\n  }\n\n  /**\n   * Get whether this wallet has approved transfers from the given operator\n   * @param address - the wallet address\n   * @param operator - the operator address\n   */\n  async isApproved(address, operator) {\n    return this.erc721.isApproved(address, operator);\n  }\n\n  /**\n   * Transfer an NFT\n   *\n   * @remarks Transfer an NFT from the connected wallet to another wallet.\n   *\n   * @example\n   * ```javascript\n   * const walletAddress = \"{{wallet_address}}\";\n   * const tokenId = 0;\n   * await contract.transfer(walletAddress, tokenId);\n   * ```\n   */\n  transfer = /* @__PURE__ */(0,_contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dc)(async (to, tokenId) => {\n    return this.erc721.transfer.prepare(to, tokenId);\n  });\n\n  /**\n   * Approve or remove operator as an operator for the caller. Operators can call transferFrom or safeTransferFrom for any token owned by the caller.\n   * @param operator - the operator's address\n   * @param approved - whether to approve or remove\n   *\n   * @internal\n   */\n  setApprovalForAll = /* @__PURE__ */(0,_contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dc)(async (operator, approved) => {\n    return this.erc721.setApprovalForAll.prepare(operator, approved);\n  });\n\n  /**\n   * Approve an operator for the NFT owner. Operators can call transferFrom or safeTransferFrom for the specified token.\n   * @param operator - the operator's address\n   * @param tokenId - the tokenId to give approval for\n   *\n   * @internal\n   */\n  setApprovalForToken = /* @__PURE__ */(0,_contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.dc)(async (operator, tokenId) => {\n    return _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aV.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method: \"approve\",\n      args: [operator, tokenId]\n    });\n  });\n\n  /**\n   * @internal\n   */\n  async prepare(method, args, overrides) {\n    return _contract_publisher_d9ce6b4c_browser_esm_js__WEBPACK_IMPORTED_MODULE_8__.aV.fromContractWrapper({\n      contractWrapper: this.contractWrapper,\n      method,\n      args,\n      overrides\n    });\n  }\n\n  /** ******************************\n   * PRIVATE FUNCTIONS\n   *******************************/\n  /**\n   * @internal\n   */\n  async call(functionName, args, overrides) {\n    return this.contractWrapper.call(functionName, args, overrides);\n  }\n}\n\n\n\n\n//# sourceURL=webpack://front/./node_modules/@thirdweb-dev/sdk/dist/nft-drop-3b1fb041.browser.esm.js?");

/***/ })

}]);